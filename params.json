{
  "name": "Rythm.js",
  "tagline": "Let your page dance.",
  "body": "Rythm.js\r\n========\r\n\r\n[![Build Status](https://travis-ci.org/Okazari/Rythm.js.svg?branch=master)](https://travis-ci.org/Okazari/Rythm.js)\r\n[![Code Climate](https://codeclimate.com/github/Okazari/Rythm.js/badges/gpa.svg)](https://codeclimate.com/github/Okazari/Rythm.js/code)\r\n\r\nDemo at : http://okazari.github.io/Rythm.js/\r\n\r\nA javascript library that makes your page dancing.\r\n\r\nActually in developpement\r\n\r\nGetting started\r\n===============\r\n\r\nInstall with npm\r\n\r\n```\r\nnpm install rythm.js\r\n```\r\n\r\nImport rythm into your page\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"../rythm.js\"></script>\r\n```\r\n\r\nAdd one of the rythm css classes to indicate which element will dance.\r\n\r\n```html\r\n<div class=\"rythm-bass\"></div>\r\n```\r\n\r\nCreate a Rythm object and give it your audio url then use the start function.\r\n```javascript\r\nvar rythm = new Rythm();\r\nrythm.setMusic(\"../examples/sample.mp3\");\r\nrythm.start();\r\n```\r\n\r\nDocumentation\r\n=============\r\n\r\nRythm object\r\n------------\r\n\r\n```javascript\r\nvar rythm = new Rythm();\r\n\r\n/* The starting scale is the minimum scale your elements will take (Scale ratio is startingScale + (pulseRatio * currentPulse));\r\n * Value in percentage between 0-1\r\n * Default 0.75\r\n */\r\nrythm.startingScale = value;\r\n\r\n/* The pulse ratio is be the maximum additionnal scale your element will take (Scale ratio is startingScale + (pulseRatio * currentPulse))\r\n * Value in percentage between 0-1\r\n * Default 0.30\r\n */\r\nrythm.pulseRatio = value;\r\n\r\n/* The max value history represent the number of passed value that will be stored to evaluate the current pulse.\r\n * Int value, minimum 1\r\n * Default 100\r\n */\r\nrythm.maxValueHistory = value;\r\n\r\n/* Set the music the page will dance to.\r\n * @audioUrl : '../example/mysong.mp3'\r\n */\r\nrythm.setMusic(audioUrl);\r\n\r\n/* Adjust music's gain.\r\n * @value : Number\r\n */\r\nrythm.setGain(value);\r\n\r\n/* Add your own rythm-class\r\n * @elementClass: Class that you want to link your rythm to.\r\n * @danceType : Atm just use \"size\";\r\n * @startValue: The starting frequence of your rythm.\r\n * @nbValue: The number of frequences of your rythm.\r\n * 1024 Frequences, your rythm will react to the average of your selected frequences.\r\n * Exemples : bass 0-10 ; medium 150-40 ; high 500-100\r\n */\r\nrythm.addRythm(elementClass, danceType, startValue, nbValue);\r\n\r\n/* Plug your computer microphone to rythm.js\r\n * This function return a promise resolved when the microphone is up.\r\n */\r\nrythm.plugMicrophone().then(function(){...})\r\n\r\n//Let's dance\r\nrythm.start();\r\n\r\n//Stop the party\r\nrythm.stop();\r\n```\r\n\r\nClasses\r\n-------\r\n\r\n+ rythm-bass\r\n+ rythm-medium\r\n+ rythm-high\r\n\r\nCustom-classes\r\n--------------\r\n\r\nYou can use the `addRythm` function to make your own classes listen to specifics frequences.\r\nHere is how the basics classes are created :\r\n+ `addRythm('rythm-bass','size',0,10);`\r\n+ `addRythm('rythm-medium','size',150,40);`\r\n+ `addRythm('rythm-high','size',500,100);`\r\n\r\nFeatures\r\n========\r\n\r\n + You actually can add classes to make your HTML Elements pulse following the rythm of your music.\r\n\r\nFuture\r\n------\r\n + Add more rythm class frequences\r\n + Add rythm move class (pulse, rotate etc...)\r\n\r\nContribute\r\n==========\r\n\r\nAny pull request will be apreciated. You can start coding on this project following this steps :\r\n + Fork the project\r\n + Clone your repository\r\n + run ```npm install```\r\n + run ```gulp``` in the main folder to launch a development webserver.\r\n + Enjoy the rythm.\r\n",
  "google": "UA-75616369-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}